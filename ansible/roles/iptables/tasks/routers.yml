---
# tasks file for iptables

- name: fw | set up forward packages across routers
  lineinfile:
    path: /etc/sysctl.d/01-forwarding.conf
    line: net.ipv4.conf.all.forwarding=1
    owner: root
    group: root
    mode: '0644'
    create: yes

- name: fw | sysctl setting
  command: sysctl -p /etc/sysctl.d/{{ item }}
  loop:
  - "01-forwarding.conf"

- name: fw | install iptables
  yum:
    name:
    - iptables
    - iptables-services
    state: present
    update_cache: true

# Очищаем правила
#$IPT -F
#$IPT -F -t nat
#$IPT -F -t mangle

- name: fw | Iptables flush filter
  iptables:
    table: filter
    chain: "{{ item }}"
    flush: yes
  with_items:  [ 'INPUT', 'FORWARD', 'OUTPUT' ]

- name: fw | Iptables flush nat
  iptables:
    table: nat
    chain: '{{ item }}'
    flush: yes
  with_items: [ 'INPUT', 'OUTPUT', 'PREROUTING', 'POSTROUTING' ]

- name: fw | Iptables flush mangle
  iptables:
    table: mangle
    chain: '{{ item }}'
    flush: yes
  with_items: [ 'INPUT', 'OUTPUT', 'PREROUTING', 'POSTROUTING' ]

#$IPT -X
#$IPT -t nat -X
#$IPT -t mangle -X

#- name: fw | Delete the user-defined chain ALLOWLIST
#  iptables:
#    chain: ALLOWLIST
#    chain_management: true
#    state: absent

# Разрешаем localhost и локалку
#$IPT -A INPUT -i lo -j ACCEPT
#$IPT -A INPUT -i eth1 -j ACCEPT
#$IPT -A OUTPUT -o lo -j ACCEPT
#$IPT -A OUTPUT -o eth1 -j ACCEPT

# Разрешаем исходящие подключения сервера
#$IPT -A OUTPUT -o eth0 -j ACCEPT
#$IPT -A OUTPUT -o eth2 -j ACCEPT

- name: fw | Allow looback and local innet for the INPUT chain
  iptables:
    table: filter
    chain: INPUT
    in_interface: "{{ item }}"
    jump: ACCEPT
  with_items: [ 'lo', 'eth1' ]

- name: fw | Allow looback and local innet for the OUTPUT chain
  iptables:
    table: filter
    chain: OUTPUT
    out_interface: "{{ item }}"
    jump: ACCEPT
  with_items: [ 'lo', 'eth0', 'eth1', 'eth2' ]

# Рзрешаем пинги
#$IPT -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT
#$IPT -A INPUT -p icmp --icmp-type destination-unreachable -j ACCEPT
#$IPT -A INPUT -p icmp --icmp-type time-exceeded -j ACCEPT
#$IPT -A INPUT -p icmp --icmp-type echo-request -j ACCEPT

- name: fw | Allow ping
  iptables:
    chain: INPUT
    protocol: icmp
    icmp_type: "{{ item }}"
    jump: ACCEPT
  with_items: [ 'echo-reply', 'destination-unreachable', 'time-exceeded', 'echo-request' ]

- name: fw | Allow ping
  iptables:
    chain: FORWARD
    protocol: icmp
    icmp_type: "{{ item }}"
    jump: ACCEPT
  with_items: [ 'echo-reply', 'destination-unreachable', 'time-exceeded', 'echo-request' ]

# разрешаем установленные подключения
#$IPT -A INPUT -p all -m state --state ESTABLISHED,RELATED -j ACCEPT
#$IPT -A OUTPUT -p all -m state --state ESTABLISHED,RELATED -j ACCEPT
#$IPT -A FORWARD -p all -m state --state ESTABLISHED,RELATED -j ACCEPT

- name: fw | Allow related and established connections
  iptables:
    chain: "{{ item }}"
    protocol: all
    match: state
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
  with_items: [ 'INPUT', 'FORWARD', 'OUTPUT' ]

# Отбрасываем неопознанные пакеты
#$IPT -A INPUT -m state --state INVALID -j DROP
#$IPT -A FORWARD -m state --state INVALID -j DROP

- name: fw | Drop unknown packages
  iptables:
    chain: "{{ item }}"
    match: state
    ctstate: INVALID
    jump: DROP
  with_items: [ 'INPUT', 'FORWARD' ]

# Отбрасываем нулевые пакеты
#$IPT -A INPUT -p tcp --tcp-flags ALL NONE -j DROP

- name: fw | Drop empty packages
  iptables:
    chain: INPUT
    protocol: tcp
    tcp_flags:
      flags: ALL
      flags_set: NONE
    jump: DROP

# Закрываемся от syn-flood атак
#$IPT -A INPUT -p tcp ! --syn -m state --state NEW -j DROP
#$IPT -A OUTPUT -p tcp ! --syn -m state --state NEW -j DROP

- name: fw | Drop syn-flood packages
  iptables:
    chain: "{{ item }}"
    protocol: tcp
    syn: "negate"
    match: state
    ctstate: NEW
    jump: DROP
  with_items: [ 'INPUT', 'OUTPUT' ]

# открываем доступ к SSH
#$IPT -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT -m comment --comment "For_ssh"
#$IPT -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT -m comment --comment "For_nginx"
#$IPT -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT -m comment --comment "For_nginx"
#$IPT -A INPUT -p tcp -m tcp --dport 9100 -j ACCEPT -m comment --comment "For_Node_exporter"

- name: fw | Allow for ssh, nginx, grafana, node_exporter
  iptables:
    chain: INPUT
    protocol: tcp
    match: tcp
    destination_port: "{{ item.port }}"
    jump: ACCEPT
    comment: "{{ item.comment }}"
  with_items:
    - { port: 22, comment: "For SSH" }
    - { port: 80, comment: "For NGINX" }
    - { port: 443, comment: "For NGINX" }
    - { port: 3000, comment: "For Grafana" }
    - { port: 9100, comment: "For Node_exporter" }

# Запрещаем все, что не разрешено
#$IPT -P INPUT DROP
#$IPT -P OUTPUT DROP
#$IPT -P FORWARD DROP

- name: fw | Set the policy for the all chain to DROP
  iptables:
    table: filter
    chain: "{{ item }}"
    policy: DROP
  with_items: [ 'INPUT', 'FORWARD', 'OUTPUT' ]






#- name: fw | comment lines with icmp-host-prohibited
#  replace:
#    path: /etc/sysconfig/iptables
#    regexp: '^(.*icmp-host-prohibited.*)$'
#    replace: '#\1'

# iptables -t nat -A PREROUTING -d 192.168.1.11 -p tcp -m tcp --dport 3000 -j DNAT --to-destination 192.168.1.17:3000
- name: fw | add masquerade
  iptables:
    table: nat 
    chain: PREROUTING
    destination: "{{ ip_address['fw'] }}"
    protocol: tcp
    match: tcp
    destination_port: 3000
    jump: DNAT
    to_destination: "{{ ip_address['monitor'] }}:3000"

# iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j MASQUERADE
- name: fw | add masquerade
  iptables:
    table: nat 
    chain: POSTROUTING
    source: "{{ local_net }}"
    out_interface: eth0
    jump: MASQUERADE

## iptables -t nat -A POSTROUTING ! -d 192.168.0.0/16 -o eth0 -j MASQUERADE
#- name: fw | add masquerade
#  iptables:
#    table: nat 
#    chain: POSTROUTING
#    out_interface: eth0
#    destination: "! {{ local_net }}"
#    jump: MASQUERADE

#- name: fw | add iptables rules
#  copy:
#    src: iptables.rules
#    dest: /etc/sysconfig/iptables

- name: fw | iptables save
  command: service iptables save

- name: fw | iptables restart
  service:
    name: iptables
    state: restarted
    enabled: true

#- name: fw | set up route
#  lineinfile:
#    path: /etc/sysconfig/network-scripts/route-eth1
#    line: 192.168.0.0/16 via 192.168.255.2
#    owner: root
#    group: root
#    mode: '0644'
#    create: yes

